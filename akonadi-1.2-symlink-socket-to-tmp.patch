diff --git a/server/CMakeLists.txt b/server/CMakeLists.txt
index 8cf4d60..dd07e4f 100644
--- a/server/CMakeLists.txt
+++ b/server/CMakeLists.txt
@@ -127,6 +127,7 @@ set(libakonadiprivate_SRCS
   src/nepomukmanager.cpp
   src/debuginterface.cpp
   src/imapstreamparser.cpp
+  src/utils.cpp
 )
 
 qt4_generate_dbus_interface( src/debuginterface.h org.freedesktop.Akonadi.DebugInterface.xml )
diff --git a/server/src/akonadi.cpp b/server/src/akonadi.cpp
index c670e61..a895dc0 100644
--- a/server/src/akonadi.cpp
+++ b/server/src/akonadi.cpp
@@ -33,6 +33,7 @@
 #include "nepomukmanager.h"
 #include "debuginterface.h"
 #include "storage/itemretrievalthread.h"
+#include "utils.h"
 
 #include "libs/xdgbasedirs_p.h"
 #include "libs/protocol_p.h"
@@ -80,7 +81,7 @@ AkonadiServer::AkonadiServer( QObject* parent )
     connectionSettings.setValue( QLatin1String( "Data/Method" ), QLatin1String( "NamedPipe" ) );
     connectionSettings.setValue( QLatin1String( "Data/NamedPipe" ), namedPipe );
 #else
-    const QString defaultSocketDir = XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi" ) );
+    const QString defaultSocketDir = Akonadi::Utils::preferredSocketDirectory( XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi" ) ) );
     QString socketDir = settings.value( QLatin1String( "Connection/SocketDirectory" ), defaultSocketDir ).toString();
     if ( socketDir[0] != QLatin1Char( '/' ) ) {
       QDir::home().mkdir( socketDir );
@@ -180,7 +181,7 @@ void AkonadiServer::quit()
 
 #ifndef Q_OS_WIN
     QSettings connectionSettings( connectionSettingsFile, QSettings::IniFormat );
-    const QString defaultSocketDir = XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi" ) );
+    const QString defaultSocketDir = Akonadi::Utils::preferredSocketDirectory( XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi" ) ) );
     const QString socketDir = settings.value( QLatin1String( "Connection/SocketDirectory" ), defaultSocketDir ).toString();
 
     if ( !QDir::home().remove( socketDir + QLatin1String( "/akonadiserver.socket" ) ) )
@@ -229,6 +230,7 @@ void AkonadiServer::startDatabaseProcess()
   const QString akDir   = XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi/" ) );
   const QString miscDir = XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi/db_misc" ) );
   const QString fileDataDir = XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi/file_db_data" ) );
+  const QString socketDir = Akonadi::Utils::preferredSocketDirectory( XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi/db_misc" ) ) );
 
   // generate config file
   const QString globalConfig = XdgBaseDirs::findResourceFile( "config", QLatin1String( "akonadi/mysql-global.conf" ) );
@@ -279,6 +281,10 @@ void AkonadiServer::startDatabaseProcess()
   if ( miscDir.isEmpty() )
     akFatal() << "Akonadi server was not able not create database misc directory";
 
+  if ( socketDir.isEmpty() ) {
+    akFatal() << "Akonadi server was not able to create socket directory";
+  }
+
   // move mysql error log file out of the way
   const QFileInfo errorLog( dataDir + QDir::separator() + QString::fromLatin1( "mysql.err" ) );
   if ( errorLog.exists() ) {
@@ -304,7 +310,7 @@ void AkonadiServer::startDatabaseProcess()
   QStringList arguments;
   arguments << QString::fromLatin1( "--defaults-file=%1/mysql.conf" ).arg( akDir );
   arguments << QString::fromLatin1( "--datadir=%1/" ).arg( dataDir );
-  arguments << QString::fromLatin1( "--socket=%1/mysql.socket" ).arg( miscDir );
+  arguments << QString::fromLatin1( "--socket=%1/mysql.socket" ).arg( socketDir );
 
   mDatabaseProcess = new QProcess( this );
   mDatabaseProcess->start( mysqldPath, arguments );
diff --git a/server/src/storage/dbconfig.cpp b/server/src/storage/dbconfig.cpp
index 0fef8ae..4acbade 100644
--- a/server/src/storage/dbconfig.cpp
+++ b/server/src/storage/dbconfig.cpp
@@ -19,6 +19,7 @@
 
 #include "dbconfig.h"
 #include "akdebug.h"
+#include "utils.h"
 #include "../../libs/xdgbasedirs_p.h"
 
 #include <QDir>
@@ -92,7 +93,7 @@ class DbConfigStatic
         }
         mInternalServer = settings.value( QLatin1String("QMYSQL/StartServer"), defaultInternalServer ).toBool();
         if ( mInternalServer ) {
-          const QString miscDir = XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi/db_misc" ) );
+          const QString miscDir = Akonadi::Utils::preferredSocketDirectory( XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi" ) ) );
           defaultOptions = QString::fromLatin1( "UNIX_SOCKET=%1/mysql.socket" ).arg( miscDir );
         }
       } else if ( mDriverName == QLatin1String("QMYSQL_EMBEDDED") ) {
@@ -109,6 +110,11 @@ class DbConfigStatic
       mUserName = settings.value( QLatin1String( "User" ) ).toString();
       mPassword = settings.value( QLatin1String( "Password" ) ).toString();
       mConnectionOptions = settings.value( QLatin1String( "Options" ), defaultOptions ).toString();
+      // Migrate socket directory
+      if ( mConnectionOptions.contains( QString::fromLatin1( "UNIX_SOCKET=%1/mysql.socket" ).arg( XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi/db_misc" ) ) ) ) ) {
+	mConnectionOptions.replace( QString::fromLatin1( "UNIX_SOCKET=%1/mysql.socket" ).arg( XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi/db_misc" ) ) ),
+				    QString::fromLatin1( "UNIX_SOCKET=%1/mysql.socket" ).arg( Akonadi::Utils::preferredSocketDirectory( XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi" ) ) ) ) );
+      }
       mServerPath = settings.value( QLatin1String("ServerPath"), defaultServerPath ).toString();
       settings.endGroup();
 
diff --git a/server/src/utils.cpp b/server/src/utils.cpp
new file mode 100644
index 0000000..02ed37f
--- /dev/null
+++ b/server/src/utils.cpp
@@ -0,0 +1,155 @@
+/*
+ * Copyright (C) 2010 Tobias Koenig <tokoe@kde.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this library; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ *
+ */
+
+#include "utils.h"
+
+#include <libs/xdgbasedirs_p.h>
+
+#include <QtCore/QDebug>
+#include <QtCore/QDir>
+#include <QtCore/QFileInfo>
+#include <QtCore/QSettings>
+#include <QtNetwork/QHostInfo>
+
+#if !defined(Q_OS_WIN)
+#include <cstdlib>
+#include <sys/types.h>
+#include <cerrno>
+#include <pwd.h>
+#include <unistd.h>
+
+static QString akonadiSocketDirectory();
+static bool checkSocketDirectory( const QString &path );
+static bool createSocketDirectory( const QString &link, const QString &tmpl );
+#endif
+
+using namespace Akonadi;
+
+QString Utils::preferredSocketDirectory( const QString &defaultDirectory )
+{
+  const QString serverConfigFile = XdgBaseDirs::akonadiServerConfigFile( XdgBaseDirs::ReadWrite );
+  const QSettings serverSettings( serverConfigFile, QSettings::IniFormat );
+
+  QString socketDir = defaultDirectory;
+  if ( !serverSettings.contains( QLatin1String( "Connection/SocketDirectory" ) ) ) {
+    // if no socket directory is defined, use the symlinked from /tmp
+    socketDir = akonadiSocketDirectory();
+
+    if ( socketDir.isEmpty() ) { // if that does not work, fall back on default
+      socketDir = defaultDirectory;
+    }
+  } else {
+    socketDir = serverSettings.value( QLatin1String( "Connection/SocketDirectory" ), defaultDirectory ).toString();
+  }
+
+  const QString userName = QString::fromLocal8Bit( qgetenv( "USER" ) );
+  if ( socketDir.contains( QLatin1String( "$USER" ) ) && !userName.isEmpty() ) {
+    socketDir.replace( QLatin1String( "$USER" ), userName );
+  }
+
+  if ( socketDir[0] != QLatin1Char( '/' ) ) {
+    QDir::home().mkdir( socketDir );
+    socketDir = QDir::homePath() + QLatin1Char( '/' ) + socketDir;
+  }
+
+  QFileInfo dirInfo( socketDir );
+  if ( !dirInfo.exists() ) {
+    QDir::home().mkpath( dirInfo.absoluteFilePath() );
+  }
+
+  return socketDir;
+}
+
+QString akonadiSocketDirectory()
+{
+  const QString hostname = QHostInfo::localHostName();
+
+  if ( hostname.isEmpty() ) {
+    qCritical() << "QHostInfo::localHostName() failed";
+    return QString();
+  }
+
+  const uid_t uid = getuid();
+  const struct passwd *pw_ent = getpwuid( uid );
+  if ( !pw_ent ) {
+    qCritical() << "Could not get passwd entry for user id" << uid;
+    return QString();
+  }
+
+  const QString link = XdgBaseDirs::saveDir( "data", QLatin1String( "akonadi" ) ) + QLatin1Char( '/' ) + QLatin1String( "socket-" ) + hostname;
+  const QString tmpl = QLatin1String( "akonadi-" ) + QLatin1String( pw_ent->pw_name ) + QLatin1String( ".XXXXXX" );
+
+  if ( checkSocketDirectory( link ) ) {
+    return QFileInfo( link ).symLinkTarget();
+  }
+
+  if ( createSocketDirectory( link, tmpl ) ) {
+    return QFileInfo( link ).symLinkTarget();
+  }
+
+  qCritical() << "Could not create socket directory for Akonadi.";
+  return QString();
+}
+
+static bool checkSocketDirectory( const QString &path )
+{
+  QFileInfo info( path );
+
+  if ( !info.exists() ) {
+    return false;
+  }
+
+  if ( info.isSymLink() ) {
+    info = QFileInfo( info.symLinkTarget() );
+  }
+
+  if ( !info.isDir() ) {
+    return false;
+  }
+
+  if ( info.ownerId() != getuid() ) {
+    return false;
+  }
+
+  return true;
+}
+
+static bool createSocketDirectory( const QString &link, const QString &tmpl )
+{
+  QString directory = QString::fromLatin1( "%1%2%3" ).arg( QDir::tempPath() ).arg( QDir::separator() ).arg( tmpl );
+
+  QByteArray directoryString = directory.toLocal8Bit().data();
+
+  if ( !mkdtemp( directoryString.data() ) ) {
+    qCritical() << "Creating socket directory with template" << directoryString << "failed:" << strerror( errno );
+    return false;
+  }
+
+  directory = QString::fromLocal8Bit( directoryString );
+
+  QFile::remove( link );
+
+  if ( !QFile::link( directory, link ) ) {
+    qCritical() << "Creating symlink from" << directory << "to" << link << "failed";
+    return false;
+  }
+
+  return true;
+}
diff --git a/server/src/utils.h b/server/src/utils.h
new file mode 100644
index 0000000..b1fd161
--- /dev/null
+++ b/server/src/utils.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2010 Tobias Koenig <tokoe@kde.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this library; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ *
+ */
+
+#ifndef UTILS_H
+#define UTILS_H
+
+#include <QtCore/QVariant>
+
+namespace Akonadi {
+namespace Utils {
+
+/**
+ * Returns the socket @p directory that is passed to this method or the one
+ * the user has overwritten via the config file.
+ */
+QString preferredSocketDirectory( const QString &directory );
+
+} // namespace Utils
+} // namespace Akonadi
+
+#endif
